// Pod Template
def cloud = env.CLOUD ?: "kubernetes"
def serviceAccount = env.SERVICE_ACCOUNT ?: "jenkins"

// Pod Environment Variables
def imagePullSecret = env.IMAGE_PULL_SECRET
def imageTag = env.IMAGE_TAG ?: "latest"
def namespace = env.NAMESPACE ?: "default"
def registry = env.REGISTRY ?: "mycluster.icp:8500"

podTemplate(label: 'mypod', cloud: cloud, serviceAccount: serviceAccount, namespace: namespace, envVars: [
        envVar(key: 'IMAGE_PULL_SECRET', value: imagePullSecret),
        envVar(key: 'IMAGE_TAG', value: imageTag),
        envVar(key: 'NAMESPACE', value: namespace),
        envVar(key: 'REGISTRY', value: registry)
    ],
    imagePullSecrets: [ imagePullSecret ],
    containers: [
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat')
  ]) {

    node('mypod') {
        container('kubectl') {
            stage('Deploy new Docker Image') {
                sh """
                #!/bin/bash
                DEPLOYMENT=`kubectl --namespace=${env.NAMESPACE} get deployments -l app=bluecompute,micro=web-bff -o name`

                kubectl --namespace=${env.NAMESPACE} get \${DEPLOYMENT}

                if [ \${?} -ne "0" ]; then
                    # No deployment to update
                    echo 'No deployment to update'
                    exit 1
                fi

                # Update Deployment
                set +e
                if [ -n ${env.IMAGE_PULL_SECRET} ]; then
                    echo 'Patching imagePullSecrets'
                    kubectl --namespace jenkins patch deployment bluecompute-ce-web -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"${env.IMAGE_PULL_SECRET}"}]}}}}'
                fi
                set -e

                kubectl --namespace=${env.NAMESPACE} set image \${DEPLOYMENT} web=${env.REGISTRY}/${env.NAMESPACE}/bluecompute-ce-web:${env.IMAGE_TAG}
                kubectl --namespace=${env.NAMESPACE} rollout status \${DEPLOYMENT}
                """
            }
        }
    }
}